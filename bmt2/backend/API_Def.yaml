openapi: 3.0.0
info:
  title: Theater Booking API
  version: 1.0.0
paths:
  /register:
    post:
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
                email:
                  type: string
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              example: { "id": 1, "username": "user123", "password": "********", "email": "user@example.com" }
        '409':
          description: Username already exists
          content:
            application/json:
              example: { "message": "Username already exists" }
        '500':
          description: Email already exists
          content:
            application/json:
              example: { "message": "Email already exists" }

  /login:
    post:
      summary: Log in and get an access token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              example: { "access_token": "your_access_token", "roles": ["user"], "username": "user123" }
        '401':
          description: Invalid credentials
          content:
            application/json:
              example: { "message": "Invalid credentials" }

  /promote:
    post:
      summary: Promote a user to admin (admin role required)
      security:
        - jwt: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                usernameOrUserId:
                  type: string
      responses:
        '200':
          description: User promoted to admin successfully
          content:
            application/json:
              example: { "message": "User user123 has been promoted to admin." }
        '401':
          description: Unauthorized (admin role required)
          content:
            application/json:
              example: { "message": "Unauthorized" }
        '404':
          description: User not found
          content:
            application/json:
              example: { "message": "User not found." }
        '500':
          description: Admin role not found
          content:
            application/json:
              example: { "message": "Admin role not found." }

  /admin/theatres:
    post:
      summary: Create a new theatre (admin role required)
      security:
        - jwt: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                place:
                  type: string
                capacity:
                  type: integer
      responses:
        '201':
          description: Theatre created successfully
          content:
            application/json:
              example: { "message": "Theatre created successfully" }
        '401':
          description: Unauthorized (admin role required)
          content:
            application/json:
              example: { "message": "Unauthorized" }

  /gettheatres:
    get:
      summary: Get list of theatres
      responses:
        '200':
          description: List of theatres
          content:
            application/json:
              example: [{"id": 1, "name": "Theatre A", "place": "City A", "capacity": 200}, ...]

  /admin/theatres/{theatreid}/add_show:
    post:
      summary: Add a new show to a theatre (admin role required)
      security:
        - jwt: []
      parameters:
        - name: theatreid
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                rating:
                  type: number
                genres:
                  type: array
                  items:
                    type: string
                ticket_price:
                  type: number
      responses:
        '201':
          description: Show added successfully
          content:
            application/json:
              example: { "message": "Show added successfully" }
        '401':
          description: Unauthorized (admin role required)
          content:
            application/json:
              example: { "message": "Unauthorized" }
        '404':
          description: Theatre not found
          content:
            application/json:
              example: { "message": "Theatre not found" }

  /edittheatre/{theatre_id}:
    put:
      summary: Edit theatre details (admin role required)
      security:
        - jwt: []
      parameters:
        - name: theatre_id
          in: path
          required: true
          schema:
          type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
      responses:
        '200':
          description: Theatre name updated successfully
          content:
            application/json:
              example: { "message": "Theatre name updated successfully" }
        '401':
          description: Unauthorized (admin role required)
          content:
            application/json:
              example: { "message": "Unauthorized" }
        '404':
          description: Theatre not found
          content:
            application/json:
              example: { "message": "Theatre not found" }

  /deletetheatre/{theatre_id}:
    delete:
      summary: Delete a theatre (admin role required)
      security:
        - jwt: []
      parameters:
        - name: theatre_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Theatre deleted successfully
          content:
            application/json:
              example: { "message": "Theatre deleted successfully" }
        '401':
          description: Unauthorized (admin role required)
          content:
            application/json:
              example: { "message": "Unauthorized" }
        '404':
          description: Theatre not found
          content:
            application/json:
              example: { "message": "Theatre not found" }

  /getshows:
    get:
      summary: Get list of shows (admin role required)
      security:
        - jwt: []
      responses:
        '200':
          description: List of shows with associated theatres
          content:
            application/json:
              example:
                - id: 1
                  name: Show A
                  rating: 4.5
                  genres: ["Drama", "Comedy"]
                  ticket_price: 15.0
                  theatre: {"id": 1, "name": "Theatre A", "place": "City A"}
                # ... more shows
        '401':
          description: Unauthorized (admin role required)
          content:
            application/json:
              example: { "message": "Unauthorized" }

  /editshow/{show_id}:
    put:
      summary: Edit show details (admin role required)
      security:
        - jwt: []
      parameters:
        - name: show_id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                rating:
                  type: number
                genres:
                  type: array
                  items:
                    type: string
                ticket_price:
                  type: number
      responses:
        '200':
          description: Show edited successfully
          content:
            application/json:
              example: { "message": "Show edited successfully" }
        '401':
          description: Unauthorized (admin role required)
          content:
            application/json:
              example: { "message": "Unauthorized" }
        '404':
          description: Show not found
          content:
            application/json:
              example: { "message": "Show not found" }
        '500':
          description: Error editing show
          content:
            application/json:
              example: { "message": "Error editing show" }

  /deleteshow/{show_id}:
    delete:
      summary: Delete a show (admin role required)
      security:
        - jwt: []
      parameters:
        - name: show_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Show and associated bookings deleted successfully
          content:
            application/json:
              example: { "message": "Show and associated bookings deleted successfully" }
        '401':
          description: Unauthorized (admin role required)
          content:
            application/json:
              example: { "message": "Unauthorized" }
        '404':
          description: Show not found
          content:
            application/json:
              example: { "message": "Show not found" }
        '500':
          description: Error deleting show and associated bookings
          content:
            application/json:
              example: { "message": "Error deleting show and associated bookings" }

  /user/dashboard:
    get:
      summary: Get user dashboard
      security:
        - jwt: []
      responses:
        '200':
          description: User dashboard with theatre and show information
          content:
            application/json:
              example: [{ "id": 1, "name": "Theatre A", "place": "City A", "shows": [ ... ] }, ...]

  /bookings/{showId}:
    get:
      summary: Get show details for booking
      security:
        - jwt: []
      parameters:
        - name: showId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Show details for booking
          content:
            application/json:
              example: { "id": 1, "name": "Show A", "rating": 4.5, "genres": ["Drama", "Comedy"], "ticket_price": 15.0, "available_seats": 150, "is_house_full": false }
        '401':
          description: Unauthorized
          content:
            application/json:
              example: { "message": "Authentication required" }
        '404':
          description: Show not found
          content:
            application/json:
              example: { "message": "Show not found" }

    post:
      summary: Book tickets for a show
      security:
        - jwt: []
      parameters:
        - name: showId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                numTickets:
                  type: integer
      responses:
        '201':
          description: Tickets booked successfully
          content:
            application/json:
              example: { "message": "2 tickets booked successfully! Total price: $30.0" }
        '400':
          description: Invalid number of tickets or house is full
          content:
            application/json:
              example: { "message": "Invalid number of tickets" }
        '401':
          description: Unauthorized
          content:
            application/json:
              example: { "message": "Authentication required" }
        '404':
          description: Show not found
          content:
            application/json:
              example: { "message": "Show not found" }

  /user/booked-tickets:
    get:
      summary: Get user's booked tickets
      security:
        - jwt: []
      responses:
        '200':
          description: List of user's booked tickets
          content:
            application/json:
              example: [{ "show_id": 1, "show_name": "Show A", "num_tickets": 2, "total_price": 30.0 }, ...]

  /exportTheatres:
    get:
      summary: Export theatre data as JSON
      security:
        - jwt: []
      responses:
        '200':
          description: List of theatres
          content:
            application/json:
              example: [{"id": 1, "name": "Theatre A"}, ...]

  /export-csv/{theatre_id}:
    get:
      summary: Initiate CSV export for a theatre
      responses:
        '200':
          description: Export task initiated
          content:
            application/json:
              example: { "message": "Export task for Theatre ID 1 initiated with task ID: task_id" }

  /download-csv/{selectedTheatre}:
    get:
      summary: Download CSV data for a theatre
      parameters:
        - name: selectedTheatre
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Download CSV file
          content:
            text/csv:
              example: (CSV data)


